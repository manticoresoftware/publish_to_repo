#!/usr/bin/env bash

RED='\033[0;31m'    # For errors
GREEN='\033[0;32m'  # For success
NC='\033[0m'        # No Color

export INDENT_LEVEL=${INDENT_LEVEL:-0}
TABS=$(printf '\t%.0s' $(seq 1 "$INDENT_LEVEL"))

echo "${TABS}version #17"  # Incremented to fix output filtering

echo "${TABS}Writing SSH key to ${SSH_KEY_LOCATION}"
echo "${SSH_KEY}" > "${SSH_KEY_LOCATION}"
chmod 600 "${SSH_KEY_LOCATION}"
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

RANDOM_SUFFIX=$(date +%s%3N)_$RANDOM

echo "${TABS}Local: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}"

retry_cmd() {
    local cmd="$1"
    local error_msg="$2"
    local copy_build="${3:-false}"
    local max_attempts=5
    local attempt=1
    local exit_code
    local output_file="/tmp/output_$$_$RANDOM"
    local live_file="/tmp/live_$$_$RANDOM"
    local build_copied=false
    local tabs=$(printf '\t%.0s' $(seq 1 "$INDENT_LEVEL"))

    while [ $attempt -le $max_attempts ]; do
        if [ "$copy_build" = "true" ] && [ "$build_copied" = "false" ]; then
            echo "${tabs}Attempt $attempt: Copying build to $TEMP_DIR before execution"
            if ! ssh -i "${SSH_KEY_LOCATION}" ${SSH_OPTS} "${REMOTE_SERVER}" "[ -d \"$TEMP_DIR/build\" ]"; then
                INDENT_LEVEL=$((INDENT_LEVEL + 1)) retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} -r build ${REMOTE_SERVER}:${TEMP_DIR}/" "couldn't scp build to $REMOTE_SERVER"
                build_copied=true
            else
                echo "${tabs}Build directory already exists, skipping re-upload"
            fi
        fi

        echo "${tabs}Attempt $attempt: $cmd"
        local exit_file="/tmp/exit_code_$$_$attempt"
        bash -c "$cmd 2>&1 | tee $live_file >$output_file; echo \$? > $exit_file"
        exit_code=$(cat "$exit_file")
        cat "$live_file" | sed "s/^/${tabs}/"  # Stream live
        local clean_output=$(cat "$output_file" | grep -v "^${tabs}Attempt [0-9]+:")
        rm -f "$exit_file" "$live_file" "$output_file"

        if [ $exit_code -eq 0 ]; then
            echo "$clean_output"  # Return clean output
            return 0
        fi

        if [ $exit_code -eq 255 ] || echo "$clean_output" | grep -qE "Connection reset by peer|Connection closed|Connection timed out|ssh:.*failed|scp:.*failed"; then
            if [ $attempt -eq $max_attempts ]; then
                echo -e "${tabs}${RED}ERROR: $error_msg after $max_attempts network-related attempts${NC}"
                echo "${tabs}Output:"
                echo "$clean_output" | sed "s/^/${tabs}/"
                exit 1
            fi
            echo -e "${tabs}${RED}Network error detected (exit $exit_code), retrying in 2s...${NC}"
            echo "${tabs}Output:"
            echo "$clean_output" | sed "s/^/${tabs}/"
            sleep 2
            if [ "$copy_build" = "true" ]; then
                build_copied=false
            fi
        else
            echo -e "${tabs}${RED}ERROR: $error_msg (non-network error, exit $exit_code)$NC"
            echo "${tabs}Output:"
            echo "$clean_output" | sed "s/^/${tabs}/"
            exit $exit_code
        fi
        ((attempt++))
    done
}

echo "${TABS}Creating base directory /tmp/upload_to_repo_runs"
BASE_DIR_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"mkdir -p /tmp/upload_to_repo_runs || exit 1\"" "couldn't create base directory")

temp_dir_script="/tmp/create_temp_dir_$$"
remote_tabs=$(printf '\t%.0s' $(seq 1 "$(($INDENT_LEVEL + 1))"))
cat <<EOF > "$temp_dir_script"
#!/bin/bash
TABS='$remote_tabs'
BASE_DIR=/tmp/upload_to_repo_runs
echo "\${TABS}Remote: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}"
RUN_ID=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}
TEMP_DIR=\${BASE_DIR}/run_\${RUN_ID}
for dir in "\${BASE_DIR}"/run_${GITHUB_RUN_ID}_*; do
  if [[ "\$dir" =~ run_${GITHUB_RUN_ID}_([0-9]+)_.*$ ]]; then
    attempt="\${BASH_REMATCH[1]}"
    if [ "\$attempt" -lt ${GITHUB_RUN_ATTEMPT} ]; then
      echo "\${TABS}Removing outdated attempt directory: \$dir"
      rm -rf "\$dir"
    fi
  fi
done
mkdir -p \$TEMP_DIR/build || { echo "\${TABS}Failed to create \$TEMP_DIR/build"; exit 1; }
if [ -d "\$TEMP_DIR/build" ]; then
  echo "\${TABS}Created: \$TEMP_DIR/build"
else
  echo "\${TABS}Error: \$TEMP_DIR/build not found after creation"
  exit 1
fi
echo "\${TABS}\$TEMP_DIR"
EOF
chmod +x "$temp_dir_script"
echo "${TABS}Local temp_dir_script content:"
cat "$temp_dir_script" | sed "s/^/${TABS}/"

echo "${TABS}Sending TEMP_DIR creation script to /tmp/create_temp_dir_${RANDOM_SUFFIX}"
SCP_TEMP_OUTPUT=$(retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} $temp_dir_script ${REMOTE_SERVER}:/tmp/create_temp_dir_${RANDOM_SUFFIX}" "couldn't scp TEMP_DIR script to $REMOTE_SERVER")

echo "${TABS}Creating TEMP_DIR on remote server"
TEMP_DIR_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"bash /tmp/create_temp_dir_${RANDOM_SUFFIX}\"" "couldn't create TEMP_DIR on remote server")
echo "${TABS}Raw TEMP_DIR_OUTPUT (hex dump):"
echo "$TEMP_DIR_OUTPUT" | od -c | sed "s/^/${TABS}/"
TEMP_DIR=$(echo "$TEMP_DIR_OUTPUT" | grep -E "^\t\t/tmp/upload_to_repo_runs/run_" | tail -n 1 | sed 's/^\t\t//')

if [ -z "$TEMP_DIR" ] || [[ ! "$TEMP_DIR" =~ ^/tmp/upload_to_repo_runs/run_ ]]; then
    echo -e "${TABS}${RED}ERROR: TEMP_DIR assignment failed, got '$TEMP_DIR'${NC}"
    echo "${TABS}Full TEMP_DIR_OUTPUT:"
    echo "$TEMP_DIR_OUTPUT" | sed "s/^/${TABS}/"
    echo "${TABS}Checking remote script existence and permissions:"
    retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"ls -l /tmp/create_temp_dir_${RANDOM_SUFFIX} || echo 'Script not found'\"" "couldn't check script existence"
    echo "${TABS}Remote script content:"
    ssh -i "${SSH_KEY_LOCATION}" ${SSH_OPTS} "${REMOTE_SERVER}" "cat /tmp/create_temp_dir_${RANDOM_SUFFIX}" | sed "s/^/${TABS}/"
    exit 1
fi
echo -e "${TABS}${GREEN}Temporary directory is $TEMP_DIR${NC}"

echo "${TABS}Verifying TEMP_DIR exists on remote server"
VERIFY_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"[ -d \\\"$TEMP_DIR\\\" ] && echo \\\"TEMP_DIR $TEMP_DIR exists\\\" || { echo \\\"ERROR: TEMP_DIR $TEMP_DIR does not exist\\\"; exit 1; }\"" "TEMP_DIR verification failed")

echo "${TABS}Copying build to $TEMP_DIR"
SCP_BUILD_OUTPUT=$(retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} -r build ${REMOTE_SERVER}:${TEMP_DIR}/" "couldn't scp build to $REMOTE_SERVER")
echo -e "${TABS}${GREEN}Copied package to $TEMP_DIR${NC}"

remote_script="/tmp/script${RANDOM_SUFFIX}"
remote_tabs=$(printf '\t%.0s' $(seq 1 "$(($INDENT_LEVEL + 1))"))
cat <<EOF > /tmp/script
#!/bin/bash
TABS='$remote_tabs'
echo "\${TABS}Starting remote script execution"
cd "${TEMP_DIR}" || { echo "\${TABS}Failed to cd to ${TEMP_DIR}"; exit 1; }
echo "\${TABS}Downloading https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/feat/improve-output/upload_repo_${TYPE} to script"
curl -sSL "https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/feat/improve-output/upload_repo_${TYPE}" > script || { echo "\${TABS}Failed to download upload_repo_${TYPE}"; exit 1; }
chmod +x script
echo "\${TABS}Running upload_repo_${TYPE} script"
INDENT_LEVEL=${INDENT_LEVEL:-0} DISTRO="${DISTR}" DIGIT_DELIMITER2="${DELIMITER}" TARGET="${TARGET}" DRY_RUN="${DRY_RUN}" ./script
EXIT_CODE=\$?  # Capture exit status
if [ "\$EXIT_CODE" -ne 0 ]; then
  echo "\${TABS}upload_repo_${TYPE} failed with exit code \$EXIT_CODE"
  exit "\$EXIT_CODE"
fi
echo "\${TABS}upload_repo_${TYPE} completed successfully"
exit 0
EOF
chmod +x /tmp/script
echo "${TABS}Local remote_script content:"
cat "/tmp/script${RANDOM_SUFFIX}" | sed "s/^/${TABS}/"

echo "${TABS}Copying remote script to ${REMOTE_SERVER}:${remote_script}"
SCP_SCRIPT_OUTPUT=$(retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} /tmp/script ${REMOTE_SERVER}:${remote_script}" "couldn't scp script to $REMOTE_SERVER")
echo -e "${TABS}${GREEN}Copied script to ${REMOTE_SERVER}:${remote_script}${NC}"

echo "${TABS}Executing remote script ${remote_script}"
echo "${TABS}Waiting for remote script to complete (this may take a few minutes)..."
EXEC_OUTPUT=$(retry_cmd "ssh -t -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} ${remote_script}" "script failed via ssh" "true")
echo "${TABS}Remote script output:"
echo "$EXEC_OUTPUT" | sed "s/^/${TABS}/"

echo "${TABS}Cleanup: remove TEMP_DIR ${TEMP_DIR}"
CLEANUP_TEMP_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"rm -rf ${TEMP_DIR}\"" "failed to cleanup TEMP_DIR via ssh")
CLEANUP_SCRIPT_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"rm -f ${remote_script} /tmp/create_temp_dir_${RANDOM_SUFFIX}\"" "failed to cleanup scripts via ssh")
echo -e "${TABS}${GREEN}Cleanup of ${TEMP_DIR}, ${remote_script}, and temp_dir_script completed${NC}"