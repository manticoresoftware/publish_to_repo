#!/usr/bin/env bash

echo "${SSH_KEY}" > ${SSH_KEY_LOCATION}
chmod 600 ${SSH_KEY_LOCATION}
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# Create TEMP_DIR with run-specific suffix in a fixed base directory
for n in `seq 1 10`; do
  TEMP_DIR=$(ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} "
    BASE_DIR=/tmp/upload_to_repo_runs;
    RUN_ID=\${GITHUB_RUN_ID}_\${GITHUB_RUN_ATTEMPT}_\${GITHUB_JOB};
    TEMP_DIR=\${BASE_DIR}/run_\${RUN_ID};
    # Clean up previous attempts of this job (same GITHUB_RUN_ID and GITHUB_JOB, lower GITHUB_RUN_ATTEMPT)
    for dir in \"\${BASE_DIR}\"/run_\${GITHUB_RUN_ID}_*_\${GITHUB_JOB}; do
      if [[ \"\$dir\" =~ run_\${GITHUB_RUN_ID}_([0-9]+)_\${GITHUB_JOB}\$ ]]; then
        attempt=\"\${BASH_REMATCH[1]}\";
        if [ \"\$attempt\" -lt \${GITHUB_RUN_ATTEMPT} ]; then
          echo \"Removing outdated attempt directory: \$dir\";
          rm -rf \"\$dir\";
        fi;
      fi;
    done;
    mkdir -p \$TEMP_DIR/build || exit 1;
    echo \$TEMP_DIR
  ")
  [[ $? -eq 0 ]] && break || if [[ $n -eq 10 ]]; then echo "ERROR: couldn't set TEMP_DIR" && exit 1; fi;
done

echo "Temporary directory is $TEMP_DIR"

for n in `seq 1 10`; do
  scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} -r build ${REMOTE_SERVER}:${TEMP_DIR}/
  [[ $? -eq 0 ]] && break || if [[ $n -eq 10 ]]; then echo "ERROR: couldn't scp to $REMOTE_SERVER" && exit 1; fi;
done

echo "Copied package to $TEMP_DIR"

cat <<EOF > /tmp/script
#!/bin/bash

# Cleanup function to remove TEMP_DIR
cleanup() {
  echo "Cleanup: remove TEMP_DIR"
  rm -rf "${TEMP_DIR}"
  echo "Cleanup: remove outdated packages"
  find /tmp -type d -ctime +2 -name 'tmp.*' -exec rm -rf {} \;
  echo "Cleanup: End cleanup"
}

# Initial cd, no trap yet
cd "${TEMP_DIR}" || exit 1

# Set trap after successful cd
trap cleanup EXIT INT TERM HUP

echo "Downloading https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE} to script"
curl -sSL "https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE}" > script || exit 1
chmod +x script
DISTRO="${DISTR}" DIGIT_DELIMITER2="${DELIMITER}" TARGET="${TARGET}" DRY_RUN="${DRY_RUN}" ./script
EXIT_CODE=\$?  # Capture exit status
if [ "\$EXIT_CODE" -ne 0 ]; then
  exit "\$EXIT_CODE"
fi
exit 0
EOF
chmod +x /tmp/script

script_name="/tmp/script$(date +%s%3N)_$RANDOM"
for n in `seq 1 10`; do
  scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} /tmp/script ${REMOTE_SERVER}:${script_name}
  [[ $? -eq 0 ]] && break || if [[ $n -eq 10 ]]; then echo "ERROR: scp failed" && exit 1; fi;
done
echo "Copied script to ${REMOTE_SERVER}:${script_name}"

for n in `seq 1 10`; do
  ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} ${script_name}
  [[ $? -eq 0 ]] && break || if [[ $n -eq 10 ]]; then echo "ERROR: script failed via ssh" && exit 1; fi;
done
echo "Ran ${script_name} on ${REMOTE_SERVER}"

for n in `seq 1 10`; do
  ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} rm ${script_name}
  [[ $? -eq 0 ]] && break || if [[ $n -eq 10 ]]; then echo "ERROR: failed to cleanup via ssh" && exit 1; fi;
done
echo "Cleanup of ${script_name} finished"