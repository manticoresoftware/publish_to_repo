#!/usr/bin/env bash

echo "${SSH_KEY}" > ${SSH_KEY_LOCATION}
chmod 600 ${SSH_KEY_LOCATION}
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

RANDOM_SUFFIX=$(date +%s%3N)_$RANDOM

echo -e "${GREEN}Local: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}${NC}"

# Function to retry SSH/SCP commands on network errors only
retry_cmd() {
    local cmd="$1"
    local error_msg="$2"
    local max_attempts=5
    local attempt=1
    local exit_code
    local output

    while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt: $cmd"
        output=$(eval "$cmd 2>temp_err")
        exit_code=$?
        if [ $exit_code -eq 0 ]; then
            echo "$output"  # Print successful output
            rm -f temp_err
            return 0
        fi

        # Check if it's a network error (e.g., exit code 255 or specific messages)
        if [ $exit_code -eq 255 ] || grep -qE "Connection reset by peer|Connection closed|Connection timed out|ssh:.*failed|scp:.*failed" temp_err; then
            if [ $attempt -eq $max_attempts ]; then
                echo -e "${RED}ERROR: $error_msg after $max_attempts network-related attempts${NC}" >&2
                cat temp_err >&2
                rm -f temp_err
                exit 1
            fi
            echo -e "${RED}Network error detected (exit $exit_code), retrying in 2s...${NC}" >&2
            cat temp_err >&2
            sleep 2
        else
            # Non-network error (e.g., script failure), fail immediately
            echo -e "${RED}ERROR: $error_msg (non-network error, exit $exit_code)${NC}" >&2
            echo "$output" >&2  # Show script output if any
            cat temp_err >&2
            rm -f temp_err
            exit $exit_code
        fi
        ((attempt++))
    done
}

# Create base directory once
retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"mkdir -p /tmp/upload_to_repo_runs || exit 1\"" "couldn't create base directory"

# Create TEMP_DIR with run-specific suffix (fixed output capture)
echo "Creating TEMP_DIR on remote server"
TEMP_DIR=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"bash -c '\
    BASE_DIR=/tmp/upload_to_repo_runs; \
    echo \\\"Remote: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}\\\"; \
    RUN_ID=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}; \
    TEMP_DIR=\${BASE_DIR}/run_\${RUN_ID}; \
    for dir in \\\"\${BASE_DIR}\\\"/run_${GITHUB_RUN_ID}_*; do \
      if [[ \\\"\\\$dir\\\" =~ run_${GITHUB_RUN_ID}_([0-9]+)_.*\\\$ ]]; then \
        attempt=\\\"\\\${BASH_REMATCH[1]}\\\"; \
        if [ \\\"\\\$attempt\\\" -lt ${GITHUB_RUN_ATTEMPT} ]; then \
          echo \\\"Removing outdated attempt directory: \\\$dir\\\"; \
          rm -rf \\\"\\\$dir\\\"; \
        fi; \
      fi; \
    done; \
    mkdir -p \\\$TEMP_DIR/build || { echo \\\"Failed to create \\\$TEMP_DIR/build\\\" >&2; exit 1; }; \
    if [ -d \\\"\\\$TEMP_DIR/build\\\" ]; then \
      echo \\\"Created: \\\$TEMP_DIR/build\\\"; \
    else \
      echo \\\"Error: \\\$TEMP_DIR/build not found after creation\\\" >&2; \
      exit 1; \
    fi; \
    echo \\\"TEMP_DIR_PATH: \\\$TEMP_DIR\\\"'\" 2>/tmp/temp_dir_err | grep '^TEMP_DIR_PATH:' | cut -d' ' -f2-")

# Check if TEMP_DIR is empty or invalid
if [ -z "$TEMP_DIR" ] || [[ "$TEMP_DIR" =~ ^/run_ ]]; then
    echo -e "${RED}ERROR: TEMP_DIR assignment failed, got '$TEMP_DIR'${NC}" >&2
    cat /tmp/temp_dir_err >&2
    rm -f /tmp/temp_dir_err
    exit 1
fi
echo -e "${GREEN}Temporary directory is $TEMP_DIR${NC}"

echo "Verifying TEMP_DIR exists on remote server"
retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"[ -d \\\"$TEMP_DIR\\\" ] && echo \\\"TEMP_DIR $TEMP_DIR exists\\\" || echo \\\"ERROR: TEMP_DIR $TEMP_DIR does not exist\\\"\"" "TEMP_DIR verification failed"

retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} -r build ${REMOTE_SERVER}:${TEMP_DIR}/" "couldn't scp build to $REMOTE_SERVER"
echo -e "${GREEN}Copied package to $TEMP_DIR${NC}"

cat <<EOF > /tmp/script
#!/bin/bash

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Cleanup function to remove TEMP_DIR
cleanup() {
  echo -e "\${GREEN}Cleanup: remove TEMP_DIR ${TEMP_DIR}\${NC}"
  rm -rf "${TEMP_DIR}"
  echo -e "\${GREEN}Cleanup: remove outdated packages\${NC}"
  find /tmp -type d -ctime +2 -name 'tmp.*' -exec rm -rf {} \;
  echo -e "\${GREEN}Cleanup completed\${NC}"
}

cd "${TEMP_DIR}" || { echo -e "\${RED}ERROR: Failed to cd to ${TEMP_DIR}\${NC}" >&2; exit 1; }
trap cleanup EXIT INT TERM HUP

echo -e "\${GREEN}Downloading https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE} to script\${NC}"
curl -sSL "https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE}" > script || { echo -e "\${RED}ERROR: Failed to download upload_repo_${TYPE}\${NC}" >&2; exit 1; }
chmod +x script
DISTRO="${DISTR}" DIGIT_DELIMITER2="${DELIMITER}" TARGET="${TARGET}" DRY_RUN="${DRY_RUN}" ./script
EXIT_CODE=\$?  # Capture exit status
if [ "\$EXIT_CODE" -ne 0 ]; then
  echo -e "\${RED}ERROR: upload_repo_${TYPE} failed with exit code \$EXIT_CODE\${NC}" >&2
  exit "\$EXIT_CODE"
fi
exit 0
EOF
chmod +x /tmp/script

script_name="/tmp/script$(date +%s%3N)_$RANDOM"
retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} /tmp/script ${REMOTE_SERVER}:${script_name}" "couldn't scp script to $REMOTE_SERVER"
echo -e "${GREEN}Copied script to ${REMOTE_SERVER}:${script_name}${NC}"

retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} ${script_name}" "script failed via ssh"
echo -e "${GREEN}Ran ${script_name} on ${REMOTE_SERVER}${NC}"

retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} rm ${script_name}" "failed to cleanup script via ssh"
echo -e "${GREEN}Cleanup of ${script_name} completed${NC}"