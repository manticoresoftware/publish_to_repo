#!/usr/bin/env bash

echo "${SSH_KEY}" > ${SSH_KEY_LOCATION}
chmod 600 ${SSH_KEY_LOCATION}
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

RANDOM_SUFFIX=$(date +%s%3N)_$RANDOM

echo "UUuupdated"
echo -e "${GREEN}Local: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}${NC}"

# Create base directory
echo "Creating base directory /tmp/upload_to_repo_runs"
BASE_CMD="ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"mkdir -p /tmp/upload_to_repo_runs || exit 1\""
echo "Executing: $BASE_CMD"
eval "$BASE_CMD" 2>temp_err
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
    echo -e "${RED}ERROR: Failed to create base directory (exit $EXIT_CODE)${NC}" >&2
    cat temp_err >&2
    rm -f temp_err
    exit 1
fi
rm -f temp_err

# Create TEMP_DIR with run-specific suffix
echo "Creating TEMP_DIR on remote server"
TEMP_DIR_CMD="ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"bash -c \\\"\\
    BASE_DIR=/tmp/upload_to_repo_runs; \\
    echo Remote: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}; \\
    RUN_ID=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}; \\
    TEMP_DIR=\\\$BASE_DIR/run_\\\$RUN_ID; \\
    for dir in \\\$BASE_DIR/run_${GITHUB_RUN_ID}_*; do \\
      if [[ \\\$dir =~ run_${GITHUB_RUN_ID}_([0-9]+)_.* ]]; then \\
        attempt=\\\$BASH_REMATCH[1]; \\
        if [ \\\$attempt -lt ${GITHUB_RUN_ATTEMPT} ]; then \\
          echo Removing outdated attempt directory: \\\$dir; \\
          rm -rf \\\$dir; \\
        fi; \\
      fi; \\
    done; \\
    mkdir -p \\\$TEMP_DIR/build || { echo Failed to create \\\$TEMP_DIR/build >&2; exit 1; }; \\
    if [ -d \\\$TEMP_DIR/build ]; then \\
      echo Created: \\\$TEMP_DIR/build; \\
    else \\
      echo Error: \\\$TEMP_DIR/build not found after creation >&2; \\
      exit 1; \\
    fi; \\
    echo \\\$TEMP_DIR > /tmp/temp_dir_debug_\\\$RUN_ID; \\
    echo TEMP_DIR_PATH: \\\$TEMP_DIR\\\"\""
echo "Executing: $TEMP_DIR_CMD"
TEMP_DIR_OUTPUT=$(eval "$TEMP_DIR_CMD" 2>temp_err)
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
    echo -e "${RED}ERROR: Failed to set TEMP_DIR (exit $EXIT_CODE)${NC}" >&2
    echo "$TEMP_DIR_OUTPUT" >&2
    cat temp_err >&2
    rm -f temp_err
    exit 1
fi
TEMP_DIR=$(echo "$TEMP_DIR_OUTPUT" | grep '^TEMP_DIR_PATH:' | cut -d' ' -f2-)

# Check if TEMP_DIR is empty or invalid
if [ -z "$TEMP_DIR" ] || echo "$TEMP_DIR" | grep -q '^/run_'; then
    echo -e "${RED}ERROR: TEMP_DIR assignment failed, got '$TEMP_DIR'${NC}" >&2
    echo "Full TEMP_DIR_OUTPUT:" >&2
    echo "$TEMP_DIR_OUTPUT" >&2
    cat temp_err >&2
    echo "Checking saved debug file on remote server:"
    ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} "cat /tmp/temp_dir_debug_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}" || echo "Debug file not found"
    echo "Listing /tmp/upload_to_repo_runs on remote server:"
    ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} "ls -ld /tmp/upload_to_repo_runs/run_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX} || echo 'Directory not found'"
    rm -f temp_err
    exit 1
fi
echo -e "${GREEN}Temporary directory is $TEMP_DIR${NC}"

# Verify TEMP_DIR exists
echo "Verifying TEMP_DIR exists on remote server"
VERIFY_CMD="ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"[ -d \\\"$TEMP_DIR\\\" ] && echo \\\"TEMP_DIR $TEMP_DIR exists\\\" || { echo \\\"ERROR: TEMP_DIR $TEMP_DIR does not exist\\\"; exit 1; }\""
echo "Executing: $VERIFY_CMD"
VERIFY_OUTPUT=$(eval "$VERIFY_CMD" 2>temp_err)
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
    echo -e "${RED}ERROR: TEMP_DIR verification failed (exit $EXIT_CODE)${NC}" >&2
    echo "$VERIFY_OUTPUT" >&2
    cat temp_err >&2
    echo "Listing /tmp/upload_to_repo_runs on remote server:"
    ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} "ls -ld /tmp/upload_to_repo_runs/run_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX} || echo 'Directory not found'" >&2
    rm -f temp_err
    exit 1
fi
echo "$VERIFY_OUTPUT"
rm -f temp_err

echo -e "${GREEN}TEMP_DIR creation and verification completed successfully${NC}"