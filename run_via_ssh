#!/usr/bin/env bash

echo "${SSH_KEY}" > ${SSH_KEY_LOCATION}
chmod 600 ${SSH_KEY_LOCATION}
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

RANDOM_SUFFIX=$(date +%s%3N)_$RANDOM

echo "version #10"  # Incremented version
echo -e "${GREEN}Local: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}${NC}"

# Function to retry SSH/SCP commands on network errors only
retry_cmd() {
    local cmd="$1"
    local error_msg="$2"
    local max_attempts=5
    local attempt=1
    local exit_code

    while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt: $cmd"
        # Execute directly instead of using eval, redirect stderr to temp file
        $cmd 2>temp_err
        exit_code=$?
        if [ $exit_code -eq 0 ]; then
            rm -f temp_err
            return 0
        fi

        if [ $exit_code -eq 255 ] || grep -qE "Connection reset by peer|Connection closed|Connection timed out|ssh:.*failed|scp:.*failed" temp_err; then
            if [ $attempt -eq $max_attempts ]; then
                echo -e "${RED}ERROR: $error_msg after $max_attempts network-related attempts${NC}" >&2
                cat temp_err >&2
                rm -f temp_err
                exit 1
            fi
            echo -e "${RED}Network error detected (exit $exit_code), retrying in 2s...${NC}" >&2
            cat temp_err >&2
            sleep 2
        else
            echo -e "${RED}ERROR: $error_msg (non-network error, exit $exit_code)${NC}" >&2
            cat temp_err >&2
            rm -f temp_err
            exit $exit_code
        fi
        ((attempt++))
    done
}

# Create base directory with retry
echo "Creating base directory /tmp/upload_to_repo_runs"
retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"mkdir -p /tmp/upload_to_repo_runs || exit 1\"" "couldn't create base directory"

# Create TEMP_DIR script locally
temp_dir_script="/tmp/create_temp_dir_$$"
cat <<EOF > "$temp_dir_script"
#!/bin/bash
BASE_DIR=/tmp/upload_to_repo_runs
echo "Remote: ${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}"
RUN_ID=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_${RANDOM_SUFFIX}
TEMP_DIR=\${BASE_DIR}/run_\${RUN_ID}
for dir in "\${BASE_DIR}"/run_${GITHUB_RUN_ID}_*; do
  if [[ "\$dir" =~ run_${GITHUB_RUN_ID}_([0-9]+)_.*$ ]]; then
    attempt="\${BASH_REMATCH[1]}"
    if [ "\$attempt" -lt ${GITHUB_RUN_ATTEMPT} ]; then
      echo "Removing outdated attempt directory: \$dir"
      rm -rf "\$dir"
    fi
  fi
done
mkdir -p \$TEMP_DIR/build || { echo "Failed to create \$TEMP_DIR/build" >&2; exit 1; }
if [ -d "\$TEMP_DIR/build" ]; then
  echo "Created: \$TEMP_DIR/build"
else
  echo "Error: \$TEMP_DIR/build not found after creation" >&2; exit 1
fi
echo \$TEMP_DIR
EOF
chmod +x "$temp_dir_script"

# Send TEMP_DIR script to remote server with retry
remote_temp_dir_script="/tmp/create_temp_dir_${RANDOM_SUFFIX}"
echo "Sending TEMP_DIR creation script to $remote_temp_dir_script"
retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} $temp_dir_script ${REMOTE_SERVER}:${remote_temp_dir_script}" "couldn't scp TEMP_DIR script to $REMOTE_SERVER"

# Execute TEMP_DIR script remotely and capture output
echo "Creating TEMP_DIR on remote server"
TEMP_DIR_OUTPUT=$(retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"bash $remote_temp_dir_script\"")
TEMP_DIR=$(echo "$TEMP_DIR_OUTPUT" | tail -n 1)

# Check if TEMP_DIR is valid
if [ -z "$TEMP_DIR" ] || [[ "$TEMP_DIR" =~ ^\"+$ ]]; then
    echo -e "${RED}ERROR: TEMP_DIR assignment failed, got '$TEMP_DIR'${NC}" >&2
    echo "Full TEMP_DIR_OUTPUT:" >&2
    echo "$TEMP_DIR_OUTPUT" >&2
    ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} "cat $remote_temp_dir_script" >&2
    exit 1
fi
echo -e "${GREEN}Temporary directory is $TEMP_DIR${NC}"

# Verify TEMP_DIR exists with retry
echo "Verifying TEMP_DIR exists on remote server"
retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"[ -d \\\"$TEMP_DIR\\\" ] && echo \\\"TEMP_DIR $TEMP_DIR exists\\\" || { echo \\\"ERROR: TEMP_DIR $TEMP_DIR does not exist\\\" >&2; exit 1; }\"" "TEMP_DIR verification failed"

# SCP build directory with retry
echo "Copying build to $TEMP_DIR"
retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} -r build ${REMOTE_SERVER}:${TEMP_DIR}/" "couldn't scp build to $REMOTE_SERVER"
echo -e "${GREEN}Copied package to $TEMP_DIR${NC}"

# Prepare the remote script
remote_script="/tmp/script${RANDOM_SUFFIX}"
cat <<EOF > /tmp/script
#!/bin/bash

# Cleanup function to remove TEMP_DIR
cleanup() {
  echo "Cleanup: remove TEMP_DIR ${TEMP_DIR}"
  rm -rf "${TEMP_DIR}"
  echo "Cleanup: remove outdated packages"
  find /tmp -type d -ctime +2 -name "tmp.*" -exec rm -rf {} \;
  echo "Cleanup completed"
}

echo "Starting remote script execution"
cd "${TEMP_DIR}" || { echo "Failed to cd to ${TEMP_DIR}" >&2; exit 1; }
trap cleanup EXIT INT TERM HUP

echo "Downloading https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE} to script"
curl -sSL "https://raw.githubusercontent.com/manticoresoftware/publish_to_repo/main/upload_repo_${TYPE}" > script || { echo "Failed to download upload_repo_${TYPE}" >&2; exit 1; }
chmod +x script
echo "Running upload_repo_${TYPE} script"
DISTRO="${DISTR}" DIGIT_DELIMITER2="${DELIMITER}" TARGET="${TARGET}" DRY_RUN="${DRY_RUN}" ./script
EXIT_CODE=\$?  # Capture exit status
if [ "\$EXIT_CODE" -ne 0 ]; then
  echo "upload_repo_${TYPE} failed with exit code \$EXIT_CODE" >&2
  exit "\$EXIT_CODE"
fi
echo "upload_repo_${TYPE} completed successfully"
exit 0
EOF
chmod +x /tmp/script

# SCP the remote script with retry
retry_cmd "scp -i ${SSH_KEY_LOCATION} ${SSH_OPTS} /tmp/script ${REMOTE_SERVER}:${remote_script}" "couldn't scp script to $REMOTE_SERVER"
echo -e "${GREEN}Copied script to ${REMOTE_SERVER}:${remote_script}${NC}"

# Run the script with retry
echo "Executing remote script ${remote_script}"
echo "Waiting for remote script to complete (this may take a few minutes)..."
retry_cmd "ssh -t -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} ${remote_script}" "script failed via ssh"
echo -e "${GREEN}Ran ${remote_script} on ${REMOTE_SERVER}${NC}"

# Cleanup with retry (only remote scripts)
retry_cmd "ssh -i ${SSH_KEY_LOCATION} ${SSH_OPTS} ${REMOTE_SERVER} \"rm -f ${remote_script} ${remote_temp_dir_script}\"" "failed to cleanup scripts via ssh"
echo -e "${GREEN}Cleanup of ${remote_script} and ${remote_temp_dir_script} completed${NC}"