#!/usr/bin/env bash
# from outside: $DISTRO = stretch,buster,xenial,bionic,focal,jammy,bullseye,bookworm
# That file here is for reference; actually used the one stored on the host to avoid checkout of the whole code

if [ -z "${BUILD_FOLDER+x}" ]; then
  BUILD_FOLDER="build/"
fi

if [ -z "${DIGIT_DELIMITER1+x}" ]; then
  DIGIT_DELIMITER1="."
fi

if [ -z "${DIGIT_DELIMITER2+x}" ]; then
  DIGIT_DELIMITER2="-"
fi

if [ -z "${DIGIT_FIELD1+x}" ]; then
  DIGIT_FIELD1=3
fi

if [ -z "${DIGIT_FIELD2+x}" ]; then
  DIGIT_FIELD2=1
fi

echo "Uploading $DISTRO"
echo "Collected debian packages in $BUILD_FOLDER"
ls "$BUILD_FOLDER"

set -e

repo_generator() {
  # shellcheck disable=SC2068
#  command="/usr/bin/docker exec -i repo-generator /generator.sh $@"
  command="/usr/bin/docker exec -i repo-generator /usr/bin/bash -c 'echo ----------- $@ ---------------'"

  echo "Command to run: $command"
  if [ -z "$DRY_RUN" ]; then
#    eval "$command"
    $("$command")
    if [[ ! $? -eq 0 ]]; then echo "ERROR: command failed"; exit 1; fi
  fi
}

echo "Contents of ./$BUILD_FOLDER:"
find "$BUILD_FOLDER"

declare -A archs

echo "Packages integrity check"
for f in `find "$BUILD_FOLDER" -type f \( -name "*deb" \)`; do
  packageName="$(basename "$f")"
  if ! repo_generator --distro "$DISTRO" --check-package --name "$packageName" "<$f"; then
      echo "$packageName is corrupted. Abort uploading"
      exit 1
  fi
done

echo "Contents of ./$BUILD_FOLDER:"
find "$BUILD_FOLDER"

for f in `find "$BUILD_FOLDER" -type f \( -name "*deb" \)`; do
  echo "file $f"
  packageName="$(basename "$f")"
  VER=$(echo "$f" | cut -d_ -f2)
  ARCH=$(echo "$f" | cut -d_ -f3 | cut -d. -f1)
  echo "Arch: $ARCH"

  if [ -f "$f" ]; then
    if [ -z "$IS_RELEASE_DIGIT" ]; then
      IS_RELEASE_DIGIT=$(echo "$f" | cut -d$DIGIT_DELIMITER1 -f$DIGIT_FIELD1 | cut -d$DIGIT_DELIMITER2 -f$DIGIT_FIELD2)
      if [[ $((IS_RELEASE_DIGIT % 2)) -ne 0 ]]; then
        TARGET="dev"
        SUFFIX="_dev"
      else
        TARGET="release"
        SUFFIX=""
      fi
    fi

    # check if we really need to put icudata to the repo this time
    # notice: it still goes to bundle archives anyway
    if [[ $f == *icudata* ]]; then
      if [[ $PACK_ICUDATA == 1 ]]; then
        ARCH=all
      else
        # dirty hack to skip this iteration
        ARCH=none
      fi
    fi

    if [[ $ARCH == "amd64" ]]; then
      archs[amd]=1
      repo_generator --distro "$DISTRO" --architecture amd --target "$TARGET" --name "$packageName" --not-index "<$f"
    fi

    if [[ $ARCH == "arm64" ]]; then
      archs[arm]=1
      repo_generator --distro "$DISTRO" --architecture arm --target "$TARGET" --name "$packageName" --not-index "<$f"
    fi

    if [[ $ARCH == "all" ]]; then
      repo_generator --distro "$DISTRO" --architecture amd --target "$TARGET" --name "$packageName" --not-index "<$f"
      repo_generator --distro "$DISTRO" --architecture arm --target "$TARGET" --name "$packageName" --not-index "<$f"
      archs[amd]=1
      archs[arm]=1
    fi
  fi
done

#echo "Contents of ./$BUILD_FOLDER:"
#find "$BUILD_FOLDER"

#echo "Finished putting packages"

#if [ -n "$MAKE_BUNDLE" ]; then
#  echo "make bundle(s) and upload them"
#
#  if [[ ${archs[amd]} == 1 ]]; then
#    echo "Making bundle x86_64"
#    TGZ1=manticore_${VER}_amd64.tgz
#    (cd build && tar cf - *_all.deb *_amd64.deb *icudata*deb | gzip -9 -f) >$TGZ1
#    repo_generator --path "/repository/manticoresearch_$DISTRO$SUFFIX/dists/" --name $TGZ1 --not-index --skip-signing <$TGZ1
#  fi
#
#  if [[ ${archs[arm]} == 1 ]]; then
#    echo "Making bundle aarch64"
#    TGZ2=manticore_${VER}_arm64.tgz
#    (cd build && tar cf - *_all.deb *_arm64.deb *icudata*deb | gzip -9 -f) >$TGZ2
#    repo_generator --path "/repository/manticoresearch_$DISTRO$SUFFIX/dists/" --name $TGZ2 --not-index --skip-signing <$TGZ2
#  fi
#fi

echo "Contents of ./$BUILD_FOLDER:"
find "$BUILD_FOLDER"

echo "Indexing"
for arch in "${!archs[@]}"; do
  echo "Indexing $DISTRO $arch $TARGET"
  repo_generator --distro "$DISTRO" --architecture "$arch" --target "$TARGET" --only-index
done

echo "Contents of ./$BUILD_FOLDER:"
find "$BUILD_FOLDER"

echo "Cleanup"
echo "BUILD_FOLDER is $BUILD_FOLDER"
ls -la $BUILD_FOLDER/ || echo "Failed to ls"
rm -rf $BUILD_FOLDER/* || echo "Failed to cleanup"
echo "Cleanup complete"
