#!/usr/bin/env bash
# from outside: $DISTRO = stretch,buster,xenial,bionic,focal,jammy,bullseye,bookworm

RED='\033[0;31m'    # For errors
GREEN='\033[0;32m'  # For success
BLUE='\033[0;34m'   # For info
NC='\033[0m'        # No Color

if [ -z "${BUILD_FOLDER+x}" ]; then
  BUILD_FOLDER="build/"
fi

if [ -z "${DIGIT_DELIMITER1+x}" ]; then
  DIGIT_DELIMITER1="."
fi

if [ -z "${DIGIT_DELIMITER2+x}" ]; then
  DIGIT_DELIMITER2="-"
fi

if [ -z "${DIGIT_FIELD1+x}" ]; then
  DIGIT_FIELD1=3
fi

if [ -z "${DIGIT_FIELD2+x}" ]; then
  DIGIT_FIELD2=1
fi

echo -e "${BLUE}Uploading $DISTRO${NC}"
echo -e "${BLUE}Collected debian packages in $BUILD_FOLDER${NC}"
ls "$BUILD_FOLDER"

set -e

repo_generator() {
  command="/usr/bin/docker exec -i repo-generator /generator.sh $@"
  echo -e "${BLUE}$command${NC}"
  if [ "$DRY_RUN" = "false" ]; then
    eval "$command" >temp_out 2>temp_err
    if [[ ! $? -eq 0 ]]; then
      echo -e "${RED}ERROR: command failed${NC}"
      cat temp_out
      cat temp_err
      rm -f temp_out temp_err
      exit 1
    fi
    cat temp_out
    cat temp_err
    rm -f temp_out temp_err
  fi
}

echo -e "${BLUE}Contents of ./$BUILD_FOLDER:${NC}"
find "$BUILD_FOLDER"

declare -A archs

echo -e "${BLUE}Packages integrity check${NC}"
for f in `find "$BUILD_FOLDER" -type f \( -name "*deb" \) | sort -t_ -k2 -r`; do
  if [ -z "$TARGET" ]; then
    DESTINATION="dev"
  else
    if [[ "$TARGET" == "release" ]]; then
      DESTINATION="release_candidate"
    else
      DESTINATION="$TARGET"
    fi
  fi

  packageName="$(basename "$f")"
  if ! repo_generator --target "$DESTINATION" --distro "$DISTRO" --check-package --name "$packageName" "<$f"; then
    echo -e "${RED}$packageName is corrupted. Abort uploading${NC}"
    exit 1
  fi
done

for f in `find "$BUILD_FOLDER" -type f \( -name "*deb" \)`; do
  echo -e "${BLUE}file $f${NC}"
  packageName="$(basename "$f")"
  VER=$(echo "$f" | cut -d_ -f2)
  if [[ "$f" == *"_amd64"* ]]; then
    ARCH="amd64"
  elif [[ "$f" == *"_arm64"* ]]; then
    ARCH="arm64"
  elif [[ "$f" == *"_all"* ]]; then
    ARCH="all"
  else
    ARCH=""
  fi
  echo -e "${BLUE}Arch: $ARCH${NC}"

  if [ -f "$f" ]; then
    if [[ $DESTINATION == "dev" ]]; then
      SUFFIX="_dev"
    elif [[ $DESTINATION == "release" ]]; then
      SUFFIX=""
    fi

    if [[ $f == *icudata* ]]; then
      if [[ $PACK_ICUDATA == 1 ]]; then
        ARCH=all
      else
        ARCH=none
      fi
    fi

    if [[ $ARCH == "amd64" ]]; then
      archs[amd]=1
      repo_generator --distro "$DISTRO" --architecture amd --target "$DESTINATION" --name "$packageName" --not-index "<$f"
    fi

    if [[ $ARCH == "arm64" ]]; then
      archs[arm]=1
      repo_generator --distro "$DISTRO" --architecture arm --target "$DESTINATION" --name "$packageName" --not-index "<$f"
    fi

    if [[ $ARCH == "all" ]]; then
      repo_generator --distro "$DISTRO" --architecture amd --target "$DESTINATION" --name "$packageName" --not-index "<$f"
      repo_generator --distro "$DISTRO" --architecture arm --target "$DESTINATION" --name "$packageName" --not-index "<$f"
      archs[amd]=1
      archs[arm]=1
    fi
  fi
done

echo -e "${GREEN}Finished putting packages${NC}"

if [ -n "$MAKE_BUNDLE" ]; then
  echo -e "${BLUE}make bundle(s) and upload them${NC}"

  if [[ ${archs[amd]} == 1 ]]; then
    echo -e "${BLUE}Making bundle x86_64${NC}"
    TGZ1=manticore_${VER}_amd64.tgz
    (cd build && tar cf - *_all.deb *_amd64.deb *icudata*deb | gzip -9 -f) >$TGZ1
    repo_generator --path "/repository/manticoresearch_$DISTRO$SUFFIX/dists/" --name $TGZ1 --not-index --skip-signing <$TGZ1
  fi

  if [[ ${archs[arm]} == 1 ]]; then
    echo -e "${BLUE}Making bundle aarch64${NC}"
    TGZ2=manticore_${VER}_arm64.tgz
    (cd build && tar cf - *_all.deb *_arm64.deb *icudata*deb | gzip -9 -f) >$TGZ2
    repo_generator --path "/repository/manticoresearch_$DISTRO$SUFFIX/dists/" --name $TGZ2 --not-index --skip-signing <$TGZ2
  fi
fi

echo -e "${BLUE}Indexing${NC}"
for arch in "${!archs[@]}"; do
  echo -e "${BLUE}Indexing $DISTRO $arch $DESTINATION${NC}"
  repo_generator --distro "$DISTRO" --architecture "$arch" --target "$DESTINATION" --only-index
done

echo -e "${BLUE}Cleanup${NC}"
rm -rf "$BUILD_FOLDER"*deb || echo -e "${RED}Failed to cleanup${NC}"
echo -e "${GREEN}Cleanup complete${NC}"